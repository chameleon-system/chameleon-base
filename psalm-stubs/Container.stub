<?php

/**
 * Container is stubbed away in order to make the return value of `get` non-nullable
 * to prevent unactionable errors.
 */

namespace Symfony\Component\DependencyInjection {

    use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
    use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
    use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;

    /**
     * @mixin ContainerInterface
     */
    class Container { }

    interface ContainerInterface {
        const EXCEPTION_ON_INVALID_REFERENCE = 1;
        const NULL_ON_INVALID_REFERENCE = 2;
        const IGNORE_ON_INVALID_REFERENCE = 3;
        const IGNORE_ON_UNINITIALIZED_REFERENCE = 4;

        /**
         * Sets a service.
         *
         * @param string      $id      The service identifier
         * @param object|null $service The service instance
         */
        public function set($id, $service);

        /**
         * Gets a service.
         *
         * @param string $id              The service identifier
         * @param int    $invalidBehavior The behavior when the service does not exist
         *
         * @return object The associated service
         *
         * @throws ServiceCircularReferenceException When a circular reference is detected
         * @throws ServiceNotFoundException          When the service is not defined
         *
         * @see Reference
         */
        public function get($id, $invalidBehavior = self::EXCEPTION_ON_INVALID_REFERENCE);

        /**
         * Returns true if the given service is defined.
         *
         * @param string $id The service identifier
         *
         * @return bool true if the service is defined, false otherwise
         */
        public function has($id);

        /**
         * Check for whether or not a service has been initialized.
         *
         * @param string $id
         *
         * @return bool true if the service has been initialized, false otherwise
         */
        public function initialized($id);

        /**
         * Gets a parameter.
         *
         * @param string $name The parameter name
         *
         * @return mixed The parameter value
         *
         * @throws InvalidArgumentException if the parameter is not defined
         */
        public function getParameter($name);

        /**
         * Checks if a parameter exists.
         *
         * @param string $name The parameter name
         *
         * @return bool The presence of parameter in container
         */
        public function hasParameter($name);

        /**
         * Sets a parameter.
         *
         * @param string $name  The parameter name
         * @param mixed  $value The parameter value
         */
        public function setParameter($name, $value);
    }
}
