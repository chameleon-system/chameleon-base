<?php

/*
 * This file is part of the Chameleon System (https://www.chameleonsystem.com).
 *
 * (c) ESONO AG (https://www.esono.de)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use ChameleonSystem\CoreBundle\MapperLoader\MapperLoaderInterface;
use ChameleonSystem\ViewRendererBundle\objects\interfaces\DataMappingServiceInterface;
use ChameleonSystem\ViewRendererBundle\objects\interfaces\DataMappingServiceResponseInterface;
use ChameleonSystem\ViewRendererBundle\objects\ViewRendererEvent;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

/**
 * View Renderer.
 *
 * example usage:
 *
 *   $oViewRenderer->AddSourceObject("foo", $oFoo);
 *   $oViewRenderer->AddMappers(array(new FooMapper()));
 *   echo $oViewRenderer->Render(dirname(__FILE__) . "/../snippets/foo.html.twig");
 *
 * to use view renderer you'll have to give it source objects (those are your models) and appropriate mappers
 * which map the data from the model to the desired view.
 */
class ViewRenderer
{
    /**
     * @var DataMappingServiceInterface
     */
    private $dataMappingService;

    /**
     * @var DataMappingServiceInterface
     */
    private $mapperChainMappingService;

    private $showHTMLHints = false;
    /**
     * @var DataMappingServiceResponseInterface
     */
    private $dataMappingServiceResponse;
    /**
     * @var TPkgViewRendererMapper_ListHandlerData[]
     */
    private $listMapHandler = [];
    /**
     * @var IPkgSnippetRenderer
     */
    private $snippetRenderer;
    /**
     * @var Symfony\Component\EventDispatcher\EventDispatcherInterface
     */
    private $eventDispatcher;
    /**
     * @var MapperLoaderInterface
     */
    private $mapperLoader;

    /**
     * @param DataMappingServiceInterface|null $dataMappingService
     * @param IPkgSnippetRenderer|null         $snippetRenderer
     * @param EventDispatcherInterface|null    $eventDispatcher
     * @param MapperLoaderInterface|null       $mapperLoader
     */
    public function __construct(DataMappingServiceInterface $dataMappingService = null, IPkgSnippetRenderer $snippetRenderer = null, EventDispatcherInterface $eventDispatcher = null, MapperLoaderInterface $mapperLoader = null)
    {
        $showViewSourceHtmlHints = \ChameleonSystem\CoreBundle\ServiceLocator::getParameter('chameleon_system_core.debug.show_view_source_html_hints');
        $this->showHTMLHints = ($showViewSourceHtmlHints && _DEVELOPMENT_MODE);
        $this->dataMappingService = $dataMappingService;

        if (null === $this->dataMappingService) {
            $this->dataMappingService = \ChameleonSystem\CoreBundle\ServiceLocator::get('chameleon_system_view_renderer.data_mapping_service');
        }

        $this->mapperChainMappingService = clone $this->dataMappingService;
        $this->snippetRenderer = $snippetRenderer;

        if (null === $this->snippetRenderer) {
            $this->snippetRenderer = \ChameleonSystem\CoreBundle\ServiceLocator::get('chameleon_system_snippet_renderer.snippet_renderer');
        }

        $this->eventDispatcher = $eventDispatcher;
        if (null === $this->eventDispatcher) {
            $this->eventDispatcher = \ChameleonSystem\CoreBundle\ServiceLocator::get('event_dispatcher');
        }
        $this->mapperLoader = $mapperLoader;
        if (null === $this->mapperLoader) {
            $this->mapperLoader = \ChameleonSystem\CoreBundle\ServiceLocator::get('chameleon_system_core.mapper_loader');
        }
    }

    /**
     * @param $mapperChainName
     * @param array $mapperIdentifiers
     */
    public function addMapperChain($mapperChainName, array $mapperIdentifiers)
    {
        $mapperService = clone $this->mapperChainMappingService;
        $mapperList = array();
        foreach ($mapperIdentifiers as $identifier) {
            $mapperList[] = $this->mapperLoader->getMapper($identifier);
        }
        $mapperService->addMappers($mapperList);
        $this->dataMappingService->addMappingService($mapperChainName, $mapperService);
    }

    /**
     * the mapper cache trigger generated by the render method.
     *
     * @return array|null
     */
    public function getPostRenderMapperCacheTrigger()
    {
        return (null !== $this->dataMappingServiceResponse) ? $this->dataMappingServiceResponse->getCacheTrigger() : array();
    }

    /**
     * @param array $aMappers
     */
    public function AddMappers($aMappers)
    {
        $this->dataMappingService->addMappers($aMappers);
    }

    /**
     * @param IViewMapper $oMapper
     */
    public function AddMapper(IViewMapper $oMapper, $transformations = null, $mapToArray = null)
    {
        $this->dataMappingService->addMapper($oMapper, $transformations, $mapToArray);
    }

    /**
     * Adds a mapper by either its service ID or fully qualified class name.
     *
     * @param string     $identifier
     * @param array|null $transformations
     * @param array|null $mapToArray
     *
     * @throws LogicException if no service could be found for the passed identifier
     */
    public function addMapperFromIdentifier($identifier, array $transformations = null, array $mapToArray = null)
    {
        $this->AddMapper($this->mapperLoader->getMapper($identifier), $transformations, $mapToArray);
    }

    /**
     * @param string $key
     * @param mixed  $value
     *
     * @return ViewRenderer
     */
    public function &AddSourceObject($key, $value)
    {
        $this->dataMappingService->addSourceObject($key, $value);

        return $this;
    }

    /**
     * add all SourceObjects from array (use for traditional data arrays).
     *
     * @param $aVars
     */
    public function AddSourceObjectsFromArray($aVars)
    {
        $this->dataMappingService->addSourceObjectsFromArray($aVars);
    }

    /**
     * generate an array of strings as source.
     *
     * @param string $sTargetName     - the array will have this name
     * @param string $sSourceListName - the data is generated from this list
     * @param string $sSourceItemName - each item in the list will be passed by this name to the snippet used to render each item
     * @param string $sSnippet        - the snippet path (relative to the ./snippet folder)
     * @param array  $aMapperChain    - the mapper chain used to generate the data for each item in the list
     */
    public function generateSourceObjectForObjectList($sTargetName, $sSourceListName, $sSourceItemName, $sSnippet, $aMapperChain)
    {
        $oListHandlerData = new TPkgViewRendererMapper_ListHandlerData();
        $oListHandlerData->setTargetVariableName($sTargetName)
            ->setSourceVariableName($sSourceListName)
            ->setItemName($sSourceItemName)
            ->setSnippetName($sSnippet)
            ->setMapperChain($aMapperChain);

        $this->listMapHandler[$sTargetName] = $oListHandlerData;
    }

    /**
     * @param string                   $sView            the path to the view
     * @param IPkgSnippetRenderer|null $oSnippetRenderer used to inject a renderer
     * @param bool                     $bEnableCaching
     *
     * @return string the rendered snippet
     *
     * @throws MapperException
     * @throws TPkgSnippetRenderer_SnippetRenderingException
     */
    public function Render($sView, $oSnippetRenderer = null, $bEnableCaching = true)
    {
        if (null === $oSnippetRenderer) {
            $oSnippetRenderer = clone $this->snippetRenderer;
            $oSnippetRenderer->InitializeSource($sView, IPkgSnippetRenderer::SOURCE_TYPE_FILE);
            $oSnippetRenderer->clear();
        }

        if ($this->hasListMapHandler()) {
            $this->injectListMapHandler();
        }

        foreach ($this->dataMappingService->getSourceData() as $sVarName => $sourceData) {
            $oSnippetRenderer->setVar($sVarName, $sourceData);
        }

        if (true === $this->dataMappingService->hasMappers()) {
            $this->dataMappingServiceResponse = $this->dataMappingService->performTransformation();

            foreach ($this->dataMappingServiceResponse->getMappedData() as $key => $value) {
                $oSnippetRenderer->setVar($key, $value);
            }
        }
        $renderedContent = $oSnippetRenderer->render();

        if ($this->getShowHTMLHints()) {
            $mappersUsed = $this->dataMappingService->getMapperNameList();
            $event = new ViewRendererEvent($renderedContent, $mappersUsed, $sView);
            $this->eventDispatcher->dispatch(ViewRendererEvent::EVENT_POST_RENDER, $event);
            $renderedContent = $event->getContent();
        }

        return $renderedContent;
    }

    /**
     * @return bool
     */
    protected function getShowHTMLHints()
    {
        return $this->showHTMLHints;
    }

    /**
     * @param bool $bShow
     */
    public function setShowHTMLHints($bShow)
    {
        $this->showHTMLHints = $bShow;
    }

    /**
     * @return bool
     */
    private function hasListMapHandler()
    {
        return count($this->listMapHandler) > 0;
    }

    private function injectListMapHandler()
    {
        $this->addMapperFromIdentifier('chameleon_system_view_renderer.mapper.list_handler');
        $this->AddSourceObject(TPkgViewRendererMapper_ListHandler::SOURCE_DATA_INPUT, $this->dataMappingService->getSourceData());
        $this->AddSourceObject(TPkgViewRendererMapper_ListHandler::SOURCE_DATA_NAME, $this->listMapHandler);
    }
}
