<?php

namespace ChameleonSystem\ExtranetBundle\LoginByTransferToken;

use ChameleonSystem\CoreBundle\Service\PageServiceInterface;
use ChameleonSystem\ExtranetBundle\Interfaces\ExtranetUserProviderInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

class LoginByTokenController
{
    /** @var TransferTokenServiceInterface */
    private $transferTokenService;

    /** @var ExtranetUserProviderInterface */
    private $extranetUserProvider;

    /** @var PageServiceInterface */
    private $pageService;

    /** @var RequestStack */
    private $requestStack;

    public function __construct(
        TransferTokenServiceInterface $transferTokenService,
        ExtranetUserProviderInterface $extranetUserProvider,
        PageServiceInterface $pageService,
        RequestStack $requestStack
    ) {
        $this->transferTokenService = $transferTokenService;
        $this->extranetUserProvider = $extranetUserProvider;
        $this->pageService = $pageService;
        $this->requestStack = $requestStack;
    }

    /**
     * Logs the user in with the given token. The token must be a token
     * as generated by the {@see TransferTokenService}.
     */
    public function loginAction(string $token): Response
    {
        $this->invalidateCurrentSession();

        $userId = $this->transferTokenService->getUserIdFromTransferToken($token);
        if (null === $userId || false === $this->loginAsUser($userId)) {
            throw new AccessDeniedHttpException();
        }

        return new RedirectResponse(
            $this->pageService->getLinkToPortalHomePageAbsolute()
        );
    }

    private function loginAsUser(string $userId): bool
    {
        $this->extranetUserProvider->reset();
        $user = $this->extranetUserProvider->getActiveUser();
        if (false === $user->Load($userId)) {
            return false;
        }

        return $user->DirectLoginWithoutPassword($user->GetName());
    }

    private function invalidateCurrentSession(): void
    {
        $this->requestStack
            ->getCurrentRequest()
            ->getSession()
            ->invalidate();
    }
}
