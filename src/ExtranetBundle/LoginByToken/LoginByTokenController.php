<?php

/*
 * This file is part of the Chameleon System (https://www.chameleonsystem.com).
 *
 * (c) ESONO AG (https://www.esono.de)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ChameleonSystem\ExtranetBundle\LoginByToken;

use ChameleonSystem\CoreBundle\Service\PageServiceInterface;
use ChameleonSystem\ExtranetBundle\Interfaces\ExtranetUserProviderInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

class LoginByTokenController
{
    /** @var LoginTokenServiceInterface */
    private $loginTokenService;

    /** @var ExtranetUserProviderInterface */
    private $extranetUserProvider;

    /** @var PageServiceInterface */
    private $pageService;

    public function __construct(
        LoginTokenServiceInterface $loginTokenService,
        ExtranetUserProviderInterface $extranetUserProvider,
        PageServiceInterface $pageService
    ) {
        $this->loginTokenService = $loginTokenService;
        $this->extranetUserProvider = $extranetUserProvider;
        $this->pageService = $pageService;
    }

    /**
     * Logs the user in with the given token. The token must be a token
     * as generated by the {@see LoginTokenServiceInterface}.
     */
    public function loginAction(string $token): Response
    {
        $userId = $this->loginTokenService->getUserIdFromToken($token);
        if (null === $userId || false === $this->loginAsUser($userId)) {
            throw new AccessDeniedHttpException();
        }

        return new RedirectResponse(
            $this->pageService->getLinkToPortalHomePageAbsolute()
        );
    }

    private function loginAsUser(string $userId): bool
    {
        $this->extranetUserProvider->reset();
        $user = $this->extranetUserProvider->getActiveUser();
        if (false === $user->Load($userId)) {
            return false;
        }

        return $user->DirectLoginWithoutPassword($user->GetName());
    }
}
