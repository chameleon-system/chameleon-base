{"version":3,"sources":["../../src/utilities/hex-to-rgba.js"],"names":["hexToRgba","color","opacity","Error","hex","match","r","g","b","length","parseInt","substring"],"mappings":"AAAA;;;;;;;AAOA;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,OAAR,EAA0B;AAAA,MAAlBA,OAAkB;AAAlBA,IAAAA,OAAkB,GAAR,GAAQ;AAAA;;AAC1C,MAAI,OAAOD,KAAP,KAAiB,WAArB,EAAkC;AAChC,UAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,MAAMC,GAAG,GAAGH,KAAK,CAACI,KAAN,CAAY,0BAAZ,CAAZ;;AACA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAID,KAAJ,CAAaF,KAAb,+BAAN;AACD;;AACD,MAAIK,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;;AACA,MAAIP,KAAK,CAACQ,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,CAAC,GAAGI,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACAJ,IAAAA,CAAC,GAAGG,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACAH,IAAAA,CAAC,GAAGE,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACD,GAJD,MAIO;AACLL,IAAAA,CAAC,GAAGI,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACAJ,IAAAA,CAAC,GAAGG,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACAH,IAAAA,CAAC,GAAGE,QAAQ,CAACT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAZ;AACD;;AAED,mBAAeL,CAAf,UAAqBC,CAArB,UAA2BC,CAA3B,UAAiCN,OAAO,GAAG,GAA3C;AACD,CAtBD","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v2.1.6): hex-to-rgba.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgba = (color, opacity = 100) => {\n  if (typeof color === 'undefined') {\n    throw new Error('Hex color is not defined')\n  }\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n  let r\n  let g\n  let b\n  if (color.length === 7) {\n    r = parseInt(color.substring(1, 3), 16)\n    g = parseInt(color.substring(3, 5), 16)\n    b = parseInt(color.substring(5, 7), 16)\n  } else {\n    r = parseInt(color.substring(1, 2), 16)\n    g = parseInt(color.substring(2, 3), 16)\n    b = parseInt(color.substring(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\n}\n\nexport default hexToRgba\n"],"file":"hex-to-rgba.js"}