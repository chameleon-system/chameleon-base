<h1>{{ 'chameleon_system_core.log_viewer.headline'|trans }}</h1>

<table class="table">
    <thead>
    <tr>
        <th>{{ 'chameleon_system_core.log_viewer.filename_label'|trans }}</th>
        <th>{{ 'chameleon_system_core.log_viewer.size_label'|trans }}</th>
        <th>{{ 'chameleon_system_core.log_viewer.last_modified_label'|trans }}</th>
        <th>{{ 'chameleon_system_core.log_viewer.number_of_lines_label'|trans }}</th>
        <th></th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    {% for log in logFiles %}
        <tr>
            <td>{{ log.filename }}</td>
            <td>{{ log.size }}</td>
            <td>{{ log.modified }}</td>
            <td>
                <input
                        type="number"
                        id="lines-{{ log.filename }}"
                        min="1"
                        value="100"
                        style="width: 80px; margin-right: 10px;"
                >
            </td>
            <td>
                <button
                        class="btn btn-primary"
                        onclick="loadLogContent('{{ log.filename }}', 'lines-{{ log.filename }}')"
                >
                    View
                </button>
            </td>
            <td>
                <button
                        id="live-button-{{ log.filename }}"
                        class="btn btn-success"
                        onclick="toggleLiveMode('{{ log.filename }}', 'lines-{{ log.filename }}', this)"
                >
                    Live
                </button>
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>

<div id="logContent" style="display: none; border: 1px solid #ccc; margin-top: 20px; padding: 10px; max-height: 400px; overflow-y: auto; background: #f9f9f9;">
    <h2 id="logTitle"></h2>
    <pre id="logLines"></pre>
</div>


<div id="liveControls" style="margin-top: 20px; display: none;">
    <button class="btn btn-danger" onclick="stopLiveMode()">Stop</button>
</div>

<script>
    function showLog(filename) {
        document.querySelectorAll('.log-content').forEach(el => el.style.display = 'none');

        const logDiv = document.getElementById('log-' + filename);
        if (logDiv) {
            logDiv.style.display = 'block';
        }
    }
</script>

<script>
    function updateURL() {
        const lines = document.getElementById('lines').value;

        if (!lines || lines <= 0) {
            alert('Please enter a valid number of lines.');
            return;
        }

        const url = new URL(window.location.href);
        url.searchParams.set('lines', lines);
        window.location.href = url.toString();
    }
</script>

<script>
    function loadLogContent(filename, inputId) {
        const linesInput = document.getElementById(inputId);
        const lines = linesInput ? linesInput.value : 100;

        if (!lines || lines <= 0) {
            alert('Please enter a valid number of lines.');
            return;
        }

        const reloadUrl = `/cms/api/logViewer/${encodeURIComponent(filename)}/${encodeURIComponent(lines)}`;
        fetch(reloadUrl, {
            method: "GET",
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP-Error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    const logTitle = document.getElementById('logTitle');
                    const logLines = document.getElementById('logLines');
                    const logContent = document.getElementById('logContent');

                    logTitle.textContent = `Viewing Log: ${data.filename}`;
                    logLines.textContent = data.lines;

                    logContent.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error fetching log content:', error);
                alert('Failed to load the log content.');
            });
    }


</script>

<script>
    let liveInterval = null;
    let activeLog = null;

    function toggleLiveMode(filename, inputId, button) {
        const linesInput = document.getElementById(inputId);

        if (!linesInput || !linesInput.value || linesInput.value <= 0) {
            alert('Please enter a valid number of lines.');
            return;
        }

        if (button.textContent.trim() === 'Live') {

            if (liveInterval) {
                alert('Another log is already in live mode. Please stop it first.');
                return;
            }

            activeLog = { filename };
            button.textContent = 'Stop';
            button.classList.remove('btn-success');
            button.classList.add('btn-danger');

            liveInterval = setInterval(() => {
                const lines = linesInput.value;
                if (!lines || lines <= 0) {
                    alert('Please enter a valid number of lines.');
                    stopLiveMode(button);
                    return;
                }

                fetch(`/cms/api/logViewer/${encodeURIComponent(filename)}/${encodeURIComponent(lines)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP-Error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                            stopLiveMode(button);
                        } else {
                            const logTitle = document.getElementById('logTitle');
                            const logLines = document.getElementById('logLines');
                            const logContent = document.getElementById('logContent');

                            logTitle.textContent = `Viewing Log (Live): ${data.filename}`;
                            logLines.textContent = data.lines;

                            logContent.style.display = 'block';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching log content in live mode:', error);
                        stopLiveMode(button);
                    });
            }, 2000);
        } else {

            stopLiveMode(button);
        }
    }

    function stopLiveMode(button) {
        if (liveInterval) {
            clearInterval(liveInterval);
            liveInterval = null;

            alert('Live mode stopped.');
        }

        activeLog = null;

        button.textContent = 'Live';
        button.classList.remove('btn-danger');
        button.classList.add('btn-success');
    }

</script>