{#
@var string id
@var string[] paths
#}

<ul id="{{ id }}" class="list-group mb-3" data-paths='{{ paths|json_encode|e('html_attr') }}'></ul>

<div class="d-flex justify-content-between align-items-center mb-2" style="gap: 1rem;">
    <div class="input-group" style="max-width: 500px;">
        <input type="text" class="form-control"
               placeholder="{{ 'chameleon_system_core.field.snippet_chain_add_path'|trans|e('html_attr') }}â€¦"
               id="{{ id|e('html_attr') }}-input" />
        <button class="btn btn-outline-secondary" type="button" id="{{ id|e('html_attr') }}-add">
            <i class="fas fa-plus"></i>
        </button>
    </div>
    <a href="#" class="btn btn-link btn-sm toggle-textarea" data-target-id="{{ id|e('html_attr') }}-textarea">
        <i class="fas fa-chevron-down"></i> {{ 'chameleon_system_core.field.snippet_chain_show_field'|trans|e('html_attr') }}
    </a>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const list = document.getElementById('{{ id }}');
        const textarea = document.querySelector(`#${CSS.escape('{{ id }}-textarea')} textarea`);
        const input = document.getElementById('{{ id }}-input');
        const addButton = document.getElementById('{{ id }}-add');

        let dragged;

        function bindDragEvents(item) {
            item.addEventListener('dragstart', function (e) {
                dragged = this;
                e.dataTransfer.effectAllowed = 'move';
            });

            item.addEventListener('dragover', function (e) {
                e.preventDefault();
            });

            item.addEventListener('drop', function (e) {
                e.preventDefault();
                if (dragged !== this) {
                    const rect = this.getBoundingClientRect();
                    const dropAbove = (e.clientY - rect.top) < (rect.height / 2);
                    if (dropAbove) {
                        this.parentNode.insertBefore(dragged, this);
                    } else {
                        this.parentNode.insertBefore(dragged, this.nextSibling);
                    }
                    updateTextarea();
                    updateOrderNumbers();
                }
            });
        }

        function createListItem(path) {
            const li = document.createElement('li');
            li.className = 'list-group-item d-flex justify-content-between align-items-center list-group-item-action';
            li.style.cursor = 'grab';
            li.setAttribute('draggable', 'true');

            li.innerHTML = `
                <div class="d-flex align-items-center">
                    <span class="badge bg-secondary me-2 order-number"></span>
                    <i class="fas fa-code-branch me-2 text-muted"></i>
                    <span class="path-text"></span>
                </div>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-secondary copy-path" title="{{ 'chameleon_system_core.field.snippet_chain_copy_path'|trans|e('html_attr') }}">
                        <i class="fas fa-copy"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger remove-path" title="{{ 'chameleon_system_core.field.snippet_chain_remove_path'|trans|e('html_attr') }}">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            `;

            li.querySelector('.path-text').textContent = path;
            bindDragEvents(li);
            return li;
        }

        function updateOrderNumbers() {
            const orderBadges = list.querySelectorAll('.order-number');
            orderBadges.forEach((badge, index) => {
                badge.textContent = index + 1;
            });
        }

        function updateTextarea() {
            const items = list.querySelectorAll('.path-text');
            const values = Array.from(items).reverse().map(el => el.textContent.trim());
            if (textarea) {
                textarea.value = values.join("\n");
                CHAMELEON.CORE.MTTableEditor.bCmsContentChanged = true;
            }
        }

        function addNewPath() {
            const value = input.value.trim();
            if (!value) return;

            const existing = Array.from(list.querySelectorAll('.path-text')).map(e => e.textContent.trim());
            if (existing.includes(value)) {
                input.value = '';
                return;
            }

            const li = createListItem(value);
            list.insertBefore(li, list.firstChild);
            input.value = '';
            updateTextarea();
            updateOrderNumbers();
        }

        // Init list from data-paths
        const initialPathsJson = list.getAttribute('data-paths');
        if (initialPathsJson) {
            try {
                const initialPaths = JSON.parse(initialPathsJson);
                initialPaths.reverse().forEach(path => {
                    list.appendChild(createListItem(path));
                });
                updateOrderNumbers();
            } catch (e) {
                console.error('Invalid initial path data', e);
            }
        }

        addButton.addEventListener('click', addNewPath);
        input.addEventListener('keydown', function (e) {
            if (e.key === 'Enter') {
                addNewPath();
                e.preventDefault();
            }
        });

        list.addEventListener('click', function (e) {
            if (e.target.closest('.remove-path')) {
                const item = e.target.closest('li');
                if (item) {
                    item.remove();
                    updateTextarea();
                    updateOrderNumbers();
                }
            }

            if (e.target.closest('.copy-path')) {
                const item = e.target.closest('li');
                if (item) {
                    const text = item.querySelector('.path-text')?.textContent;
                    if (text) {
                        navigator.clipboard.writeText(text).then(() => {
                            e.target.closest('.copy-path').classList.add('text-success');
                            setTimeout(() => {
                                e.target.closest('.copy-path').classList.remove('text-success');
                            }, 800);
                        });
                    }
                }
            }
        });

        // Toggle textarea visibility
        document.querySelectorAll('.toggle-textarea').forEach(btn => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('data-target-id');
                const target = document.getElementById(targetId);
                if (target) {
                    const isHidden = target.classList.contains('d-none');
                    target.classList.toggle('d-none');
                    this.innerHTML = isHidden
                        ? '<i class="fas fa-chevron-up"></i> {{ 'chameleon_system_core.field.snippet_chain_hide_field'|trans|e('html_attr') }}'
                        : '<i class="fas fa-chevron-down"></i> {{ 'chameleon_system_core.field.snippet_chain_show_field'|trans|e('html_attr') }}';
                }
            });
        });

        // Rebuild list when textarea changes
        if (textarea) {
            textarea.addEventListener('input', function () {
                const newPaths = textarea.value.split("\n")
                    .map(line => line.trim())
                    .filter(line => line !== '');

                list.innerHTML = '';
                newPaths.forEach(path => {
                    list.appendChild(createListItem(path));
                });
                updateOrderNumbers();
                CHAMELEON.CORE.MTTableEditor.bCmsContentChanged = true;
            });
        }
    });
</script>
